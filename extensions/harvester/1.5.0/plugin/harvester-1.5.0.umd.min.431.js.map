{"version":3,"file":"harvester-1.5.0.umd.min.431.js","mappings":"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","sources":["webpack://harvester-1.5.0/./mixins/harvester-vm/index.js","webpack://harvester-1.5.0/./mixins/harvester-vm/impl.js"],"sourcesContent":["import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\nimport { GIBIBYTE } from '../../utils/unit';\nimport { VOLUME_MODE } from '@pkg/harvester/config/types';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      showYaml:                      false,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      tpmPersistentStateEnabled:     false,\n      efiPersistentStateEnabled:     false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable && N.isEtcd !== 'true').map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || VOLUME_MODE.BLOCK;\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.showYaml ? false : this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvester.virtualMachine.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvester.virtualMachine.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvester.virtualMachine.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvester.virtualMachine.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvester.virtualMachine.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const tpmPersistentStateEnabled = this.isTPMPersistentStateEnabled(spec);\n      const efiPersistentStateEnabled = this.isEFIPersistentStateEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['efiPersistentStateEnabled'] = efiPersistentStateEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['tpmPersistentStateEnabled'] = tpmPersistentStateEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }${ GIBIBYTE }`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       VOLUME_MODE.BLOCK,\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || VOLUME_MODE.BLOCK;\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }${ GIBIBYTE }`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (this.needNewSecret || !this.secretName) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials === false) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decided by the\n     * \"Install guest agent\", \"OS type\", \"SSH keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }${ GIBIBYTE }`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = {\n      efi: false, secureBoot: false, efiPersistentStateEnabled: false\n    }) {\n      if (boot.efi) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', boot.secureBoot);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n\n        return;\n      }\n\n      if (boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n      } else {\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n      }\n\n      if (boot.efiPersistentStateEnabled) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.persistent', true);\n      } else {\n        delete this.spec.template.spec.domain.firmware.bootloader.efi['persistent'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM({ tpmEnabled = false, tpmPersistentStateEnabled = false } = {}) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', tpmPersistentStateEnabled ? { persistent: true } : {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({\n        efi: val, secureBoot: this.secureBoot, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: val, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    efiPersistentStateEnabled(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: this.secureBoot, efiPersistentStateEnabled: val\n      });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM({ tpmEnabled: val, tpmPersistentStateEnabled: this.tpmPersistentStateEnabled });\n    },\n\n    tpmPersistentStateEnabled(val) {\n      this.setTPM({ tpmEnabled: this.tpmEnabled, tpmPersistentStateEnabled: val });\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this['userScript'] = out;\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      // refresh yaml editor to get the latest userScript\n      this.userScript = this.getUserData({ installAgent: this.installAgent, osType: this.osType });\n      this.refreshYamlEditor();\n\n      const _diff = difference(old, neu);\n\n      if (_diff.length > 0 && this.isCreate) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm;\n    },\n\n    isTPMPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm?.persistent;\n    },\n\n    isEFIPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.persistent;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n"],"names":["LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","OS","label","value","match","CD_ROM","HARD_DISK","mixins","impl","props","type","Object","required","resourceType","String","default","fetch","inStore","this","$store","getters","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","sshs","HCI","SSH","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","secrets","SECRET","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","id","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","name","spec","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","data","isClone","realMode","_CLONE","showYaml","osType","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","userScript","imageId","diskRows","networkRows","machineType","secretName","secretRef","showAdvanced","deleteAgent","memory","cpu","reservedMemory","accessCredentials","efiEnabled","tpmEnabled","tpmPersistentStateEnabled","efiPersistentStateEnabled","secureBoot","userDataTemplateId","saveUserDataAsClearText","saveNetworkDataAsClearText","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","map","n","networkName","vmNetworks","selectedVMNetworks","find","uniq","clusterNetworkResource","N","isUnSchedulable","isEtcd","node","requireLabelKeys","isNetworkSchedule","length","clusterNetwork","push","requireLabelKey","metadata","labels","nameDisplay","t","disabled","storageClassSetting","storageClassValue","O","HCI_SETTING","DEFAULT_STORAGE_CLASS","JSON","parse","e","customVolumeMode","volumeMode","VOLUME_MODE","BLOCK","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","getInitConfig","init","methods","config","existUserData","fromTemplate","vm","BACKUP","status","source","volumeBackups","resources","template","domain","limits","requests","HCI_ANNOTATIONS","VM_MAINTENANCE_MODE_STRATEGY","cores","annotations","VM_RESERVED_MEMORY","getSSHFromAnnotation","getRootImageId","getDiskRows","getNetworkRows","getHasCreatedVolumes","userData","networkData","getCloudInitNoCloud","secretBackups","secretNetworkData","networkdata","secretUserData","userdata","base64Decode","getOsType","getInitUserData","isInstallUSBTablet","hasInstallAgent","isEfiEnabled","isTpmEnabled","isTPMPersistentStateEnabled","isEFIPersistentStateEnabled","isSecureBoot","isCpuPinning","getSecret","getAccessCredentials","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","volumes","_disks","devices","disks","_volumeClaimTemplates","parseVolumeClaimTemplates","out","bus","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","GIBIBYTE","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","V","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","undefined","IMAGE_ID","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","diskNameLables","volumeClaimTemplates","forEach","R","prefixName","dataVolumeName","includes","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","cloudInitNoCloud","networkDataSecretRef","SSH_NAMES","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","users","DYNAMIC_SSHKEYS_USERS","row","ACCESS_CREDENTIALS","RESET_PWD","username","userPassword","secret","propagationMethod","qemuGuestAgent","INJECT_SSH","sshkeys","sshPublicKey","Array","from","Set","DYNAMIC_SSHKEYS_NAMES","getMaintenanceStrategyOptionLabel","opt","_QGA_JSON","getMatchQGA","jsyaml","userDataDoc","YAML","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","getSSHValue","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","item","items","key","hasCloudConfigComment","commentBefore","isMatchProp","userDataYAML","userDataJSON","packages","runcmd","isArray","QGA_JSON","findIndex","hasSameRuncmd","S","join","hasSimilarRuncmd","getSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","convertToJson","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","newPassword","secretId","keypair","s","publicKey","getAccessCredentialsValidation","errors","fieldName","message","val","handlerUSBTablet","hasExist","inputs","USB_TABLET","assign","isEqual","setBootMethod","boot","efi","features","set","smm","noKeys","keys","firmware","bootloader","setCpuPinning","setTPM","persistent","deleteSSHFromUserData","ssh","getSSHFromUserData","userDataJson","ssh_authorized_keys","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","watch","handler","old","imageOSType","oldImageId","immediate","deep","hasCloudComment","_diff","difference","package_update","QGA_MAP","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","contents","exist","comment","clone","hasCustomQGA","oldValue","dataFormat","Error","tpm","dedicatedCpuPlacement","decodedData","credentials","c","ids","script","compareSSHValue","a","b","r","replace","mergeAllSSHs","allSSHs","hasSSHResource","_userDataSSH","sshValue"],"sourceRoot":""}